class MinHeap:
    def __init__(self, arr=None):
        self.heap = [] if arr is None else arr.copy()
        for i in range(len(self.heap) // 2, -1, -1):
            self._shift_down(i)

    def _shift_up(self, i):
        parent = (i - 1) // 2
        while i > 0 and self.heap[i][0] < self.heap[parent][0]:
            self.heap[i], self.heap[parent] = self.heap[parent], self.heap[i]
            i = parent
            parent = (i - 1) // 2

    def _shift_down(self, i):
        left = 2 * i + 1
        right = 2 * i + 2
        smallest = i
        if left < len(self.heap) and self.heap[left][0] < self.heap[smallest][0]:
            smallest = left
        if right < len(self.heap) and self.heap[right][0] < self.heap[smallest][0]:
            smallest = right
        if smallest != i:
            self.heap[i], self.heap[smallest] = self.heap[smallest], self.heap[i]
            self._shift_down(smallest)

    def insert(self, element):
        self.heap.append(element)
        self._shift_up(len(self.heap) - 1)

    def extract_min(self):
        if not self.heap:
            return None
        min_val = self.heap[0]
        self.heap[0], self.heap[-1] = self.heap[-1], self.heap[0]
        self.heap.pop()
        if self.heap:
            self._shift_down(0)
        return min_val

    def is_empty(self):
        return len(self.heap) == 0


class PriorityQueue:
    def __init__(self):
        self.queue = MinHeap()

    def enqueue(self, element):
        self.queue.insert(element)

    def dequeue(self):
        return self.queue.extract_min()

    def is_empty(self):
        return self.queue.is_empty()


class Graph:
    def __init__(self, num_nodes, edges):
        self.num_nodes = num_nodes
        self.adjacency_list = self.build_adj_list(edges)

    def build_adj_list(self, edges):
        adj_list = {i: [] for i in range(self.num_nodes)}
        for u, v, weight in edges:
            adj_list[u].append((v, weight))
            adj_list[v].append((u, weight))  # Assuming undirected graph
        return adj_list


def dijkstra(graph, start):
    distances = {v: float('inf') for v in graph.adjacency_list}
    distances[start] = 0
    previous = {v: None for v in graph.adjacency_list}
    visited = {v: False for v in graph.adjacency_list}

    pq = PriorityQueue()
    pq.enqueue((0, start))

    while not pq.is_empty():
        current_distance, current_node = pq.dequeue()
        if visited[current_node]:
            continue

        visited[current_node] = True

        for neighbor, weight in graph.adjacency_list[current_node]:
            if visited[neighbor]:
                continue
            new_distance = current_distance + weight
            if new_distance < distances[neighbor]:
                distances[neighbor] = new_distance
                previous[neighbor] = current_node
                pq.enqueue((new_distance, neighbor))

    return distances, previous


# Example usage
edges = [
    (0, 1, 4),
    (0, 2, 1),
    (1, 3, 1),
    (2, 1, 2),
    (2, 3, 5),
    (3, 4, 3),
    (1, 4, 5),
    (2, 4, 1)
]
num_nodes = 5
graph = Graph(num_nodes, edges)

distances, previous = dijkstra(graph, 0)
print("Shortest distances from node 0:", distances)
print("Previous nodes in shortest path tree:", previous)
